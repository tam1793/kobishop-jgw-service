/*
 * This file is generated by jOOQ.
*/
package kobishop.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import kobishop.Keys;
import kobishop.Kobishop;
import kobishop.tables.records.AccountRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 514194516;

    /**
     * The reference instance of <code>kobishop.account</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>kobishop.account.id</code>.
     */
    public final TableField<AccountRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>kobishop.account.username</code>.
     */
    public final TableField<AccountRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(15).nullable(false), this, "");

    /**
     * The column <code>kobishop.account.password</code>.
     */
    public final TableField<AccountRecord, byte[]> PASSWORD = createField("password", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>kobishop.account.role</code>.
     */
    public final TableField<AccountRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR.length(6).nullable(false), this, "");

    /**
     * The column <code>kobishop.account.name</code>.
     */
    public final TableField<AccountRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>kobishop.account.email</code>.
     */
    public final TableField<AccountRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(252).nullable(false), this, "");

    /**
     * The column <code>kobishop.account.birthday</code>.
     */
    public final TableField<AccountRecord, String> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

    /**
     * The column <code>kobishop.account.address</code>.
     */
    public final TableField<AccountRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR.length(252), this, "");

    /**
     * The column <code>kobishop.account.phone</code>.
     */
    public final TableField<AccountRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

    /**
     * Create a <code>kobishop.account</code> table reference
     */
    public Account() {
        this("account", null);
    }

    /**
     * Create an aliased <code>kobishop.account</code> table reference
     */
    public Account(String alias) {
        this(alias, ACCOUNT);
    }

    private Account(String alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(String alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kobishop.KOBISHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.KEY_ACCOUNT_PRIMARY, Keys.KEY_ACCOUNT_USERNAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account as(String alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(name, null);
    }
}
